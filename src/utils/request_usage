Example 1: Basic GET Request
python
from large_json_retriever import LargeJSONRetriever
import logging

# Configure logging to see what's happening
logging.basicConfig(level=logging.INFO)

# Using context manager for automatic cleanup
with LargeJSONRetriever() as retriever:
    try:
        # Simple GET request
        data = retriever.get_json("https://jsonplaceholder.typicode.com/posts/1")
        print(f"Received data: {data}")
        
    except Exception as e:
        print(f"Request failed: {e}")
        
Example 2: Multiple Requests with Connection Pooling
python
from large_json_retriever import LargeJSONRetriever

# Configure with larger connection pool
retriever = LargeJSONRetriever(
    pool_connections=20,
    pool_maxsize=20,
    timeout=15,
    max_response_size=50*1024*1024  # 50MB limit
)

try:
    # First request - connection established
    users = retriever.get_json("https://jsonplaceholder.typicode.com/users")
    print(f"Got {len(users)} users")
    
    # Subsequent requests reuse connections from the pool
    posts = retriever.get_json("https://jsonplaceholder.typicode.com/posts")
    print(f"Got {len(posts)} posts")
    
    # Request with parameters
    user_posts = retriever.get_json(
        "https://jsonplaceholder.typicode.com/posts",
        params={"userId": 1}
    )
    print(f"User 1 has {len(user_posts)} posts")
    
finally:
    retriever.close()  # Important to release connections

Example 3: Handling Large Responses
python
from large_json_retriever import LargeJSONRetriever

# Configure for large responses with streaming
with LargeJSONRetriever(
    chunk_size=16384,  # 16KB chunks
    max_response_size=None,  # No size limit
    timeout=60  # Longer timeout for large downloads
) as retriever:
    
    try:
        # Large dataset download
        large_data = retriever.get_json(
            "https://example.com/api/large-dataset",
            headers={"Authorization": "Bearer your_token_here"}
        )
        print(f"Received dataset with {len(large_data)} records")
        
    except ValueError as e:
        print(f"Size or parsing error: {e}")
    except requests.exceptions.RequestException as e:
        print(f"Network error: {e}")

Example 4: Error Handling and Retries
python
from large_json_retriever import LargeJSONRetriever

# Configure with aggressive retries
with LargeJSONRetriever(
    max_retries=5,
    backoff_factor=1.0,  # Longer wait between retries
    pool_block=True  # Wait for connection if pool is full
) as retriever:
    
    try:
        # This will retry if server returns 5xx errors
        data = retriever.get_json(
            "https://unstable-api.example.com/data",
            timeout=10
        )
        print("Request succeeded after retries")
        
    except requests.exceptions.Timeout:
        print("Request timed out after retries")
    except requests.exceptions.HTTPError as e:
        print(f"HTTP error: {e.response.status_code}")
    except Exception as e:
        print(f"Unexpected error: {e}")

Example 5: Dynamic Pool Configuration
python
from large_json_retriever import LargeJSONRetriever

with LargeJSONRetriever() as retriever:
    # Start with default pooling
    initial_data = retriever.get_json("https://api.example.com/initial-data")
    
    # Dynamically adjust pooling for heavy load
    retriever._configure_pooling(
        pool_connections=30,
        pool_maxsize=30,
        pool_block=True
    )
    
    # Make many concurrent requests (in real apps, use threads)
    endpoints = ["users", "posts", "comments", "albums", "photos"]
    for endpoint in endpoints:
        try:
            data = retriever.get_json(f"https://api.example.com/{endpoint}")
            print(f"Got {len(data)} {endpoint}")
        except Exception as e:
            print(f"Failed to get {endpoint}: {e}")

Example 6: POST Request with JSON Payload
python
from large_json_retriever import LargeJSONRetriever

with LargeJSONRetriever() as retriever:
    try:
        # POST with JSON payload
        response = retriever.post_json(
            "https://api.example.com/create",
            json_data={
                "title": "New Post",
                "body": "This is the content",
                "userId": 1
            },
            headers={
                "Content-Type": "application/json",
                "Authorization": "Bearer your_token"
            }
        )
        print(f"Created resource with ID: {response.get('id')}")
        
    except Exception as e:
        print(f"POST request failed: {e}")

Example 7: Monitoring Download Progress
python
from large_json_retriever import LargeJSONRetriever

def progress_callback(bytes_received, total_size=None):
    if total_size:
        percent = (bytes_received / total_size) * 100
        print(f"Downloaded {bytes_received}/{total_size} bytes ({percent:.1f}%)")
    else:
        print(f"Downloaded {bytes_received} bytes")

with LargeJSONRetriever() as retriever:
    try:
        # Get content length first
        response = retriever.session.head("https://api.example.com/large-data")
        content_length = int(response.headers.get('Content-Length', 0))
        
        # Download with progress
        print(f"Starting download ({content_length} bytes)")
        data = retriever.get_json(
            "https://api.example.com/large-data",
            headers={"Accept": "application/json"}
        )
        print("Download complete!")
        
    except Exception as e:
        print(f"Download failed: {e}")